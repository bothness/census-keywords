<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
  <style>
    .links line {
      stroke: #333;
      stroke-opacity: 0.2;
    }

    .nodes circle {
      stroke: #fff;
      stroke-width: 1.5px;
    }

    body {
      font-family: 'Open Sans', sans-serif;
    }
    text {
      font-size: 10px;
    }
    p {
      width: 600px;
    }
  </style>
</head>

<body>
  <h2>2011 Census Keywords</h2>
  <p><small>Keywords gathered from <a href="https://www.nomisweb.co.uk/api/v01/dataset/def.sdmx.json?search=*c2011*&select=KeyFamilies,KeyFamily,Name,Description,Annotations,Components,Dimension" target="_blank">Nomis API 2011 Census metadata</a>. Connections represent data tables with common keywords. Sized by number of occurences. <a href="https://bl.ocks.org/heybignick/3faf257bbbbc7743bb72310d03b86ee8" target="_blank">D3 force-directed layout</a>.</small></p>
  <svg width="1000" height="600"></svg>
  <script src="https://d3js.org/d3.v4.min.js"></script>
  <script>

    const categories = [
      'housing',
      'age/gender',
      'population group',
      'area/density',
      'living arrangements',
      'mobility',
      'identity/language',
      'socio-economic',
      'health',
      'employment'
    ];

    var svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height");
    svg.attr("viewBox", [(-width*2) / 5, (-height*2) / 3, width, height]);

    var color = d3.scaleOrdinal(d3.schemeCategory20);

    var simulation = d3.forceSimulation()
      .force("link", d3.forceLink().id(function (d) { return d.id; }))
      .force("charge", d3.forceManyBody().strength(-200))
      .force("x", d3.forceX())
      .force("y", d3.forceY());

    d3.json("./data/graph.json", function (error, graph) {
      if (error) throw error;

      var link = svg.append("g")
        .attr("class", "links")
        .selectAll("line")
        .data(graph.links)
        .enter().append("line")
        .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

      var node = svg.append("g")
        .attr("class", "nodes")
        .selectAll("g")
        .data(graph.nodes)
        .enter().append("g")

      var circles = node.append("circle")
        .attr("r", function (d) { return ((Math.sqrt(d.links) / 2) + 2); })
        .attr("fill", function (d) { return color(d.group); })
        .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

      var labels = node.append("text")
        .text(function (d) {
          return d.id;
        })
        .attr('x', 0)
        .attr('y', 0)
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle');

      node.append("title")
        .text(function (d) { return (d.id + ' (' + categories[d.group - 1] + ')' ); });

      simulation
        .nodes(graph.nodes)
        .on("tick", ticked);

      simulation.force("link")
        .links(graph.links);

      function ticked() {
        link
          .attr("x1", function (d) { return d.source.x; })
          .attr("y1", function (d) { return d.source.y; })
          .attr("x2", function (d) { return d.target.x; })
          .attr("y2", function (d) { return d.target.y; });

        node
          .attr("transform", function (d) {
            return "translate(" + d.x + "," + d.y + ")";
          })
      }
    });

    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }

  </script>
</body>

</html>